@inproceedings{smart_inspect,
  TITLE = {{SmartInspect: Solidity Smart Contract Inspector}},
  AUTHOR = {Bragagnolo, Santiago and Rocha, Henrique S C and Denker, Marcus and Ducasse, St{\'e}phane},
  URL = {https://hal.inria.fr/hal-01831075},
  BOOKTITLE = {{IWBOSE 2018 - 1st International Workshop on Blockchain Oriented Software Engineering}},
  ADDRESS = {Campobasso, Italy},
  PUBLISHER = {{IEEE}},
  YEAR = {2018},
  MONTH = Mar,
  DOI = {10.1109/IWBOSE.2018.8327566},
  KEYWORDS = {Smart Contracts ; Ethereum ; Blockchain ; Inspecting ; Solidity},
  PDF = {https://hal.inria.fr/hal-01831075/file/Braga18a-IWBOSE-SmartInspect.pdf},
  HAL_ID = {hal-01831075},
  HAL_VERSION = {v1},
}

@inproceedings{smarter,
author = {Luu, Loi and Chu, Duc-Hiep and Olickel, Hrishi and Saxena, Prateek and Hobor, Aquinas},
title = {Making Smart Contracts Smarter},
year = {2016},
isbn = {9781450341394},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2976749.2978309},
doi = {10.1145/2976749.2978309},
abstract = {Cryptocurrencies record transactions in a decentralized data structure called a blockchain.
Two of the most popular cryptocurrencies, Bitcoin and Ethereum, support the feature
to encode rules or scripts for processing transactions. This feature has evolved to
give practical shape to the ideas of smart contracts, or full-fledged programs that
are run on blockchains. Recently, Ethereum's smart contract system has seen steady
adoption, supporting tens of thousands of contracts, holding millions dollars worth
of virtual coins.In this paper, we investigate the security of running smart contracts
based on Ethereum in an open distributed network like those of cryptocurrencies. We
introduce several new security problems in which an adversary can manipulate smart
contract execution to gain profit. These bugs suggest subtle gaps in the understanding
of the distributed semantics of the underlying platform. As a refinement, we propose
ways to enhance the operational semantics of Ethereum to make contracts less vulnerable.
For developers writing contracts for the existing Ethereum system, we build a symbolic
execution tool called Oyente to find potential security bugs. Among 19, 336 existing
Ethereum contracts, Oyente flags 8, 833 of them as vulnerable, including the TheDAO
bug which led to a 60 million US dollar loss in June 2016. We also discuss the severity
of other attacks for several case studies which have source code available and confirm
the attacks (which target only our accounts) in the main Ethereum network.},
booktitle = {Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
pages = {254–269},
numpages = {16},
keywords = {blockchain, ethereum, cryptocurrencies, symbolic execution, smart contract},
location = {Vienna, Austria},
series = {CCS '16}
}

@article{article,
author = {Nakamoto, Satoshi},
year = {2008},
month = {},
pages = {},
title = {Bitcoin: A Peer-to-Peer Electronic Cash System}
}

@article{ethereum,
author = {Wood, Gavin},
year = {2018},
month = {06},
pages = {1-39},
title = {Ethereum: A secure decentralised generalised transaction ledger},
series = {Ethereum Yellow Paper. Byzantium Version e94ebda}
}

@article{white_paper,
author = {Ethereum Foundation},
year = {2014},
url = {https://ethereum.org/en/whitepaper/},
title = {Ethereum's white paper}
}

@inproceedings{10.1145/2993600.2993611,
author = {Bhargavan, Karthikeyan and Delignat-Lavaud, Antoine and Fournet, C\'{e}dric and Gollamudi, Anitha and Gonthier, Georges and Kobeissi, Nadim and Kulatova, Natalia and Rastogi, Aseem and Sibut-Pinote, Thomas and Swamy, Nikhil and Zanella-B\'{e}guelin, Santiago},
title = {Formal Verification of Smart Contracts: Short Paper},
year = {2016},
isbn = {9781450345743},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2993600.2993611},
doi = {10.1145/2993600.2993611},
booktitle = {Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security},
pages = {91–96},
numpages = {6},
keywords = {EVM, solidity, smart contracts, formal verification, ethereum},
location = {Vienna, Austria},
series = {PLAS '16}
}

@inproceedings{criminal,
author = {Juels, Ari and Kosba, Ahmed and Shi, Elaine},
title = {The Ring of Gyges: Investigating the Future of Criminal Smart Contracts},
year = {2016},
isbn = {9781450341394},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2976749.2978362},
doi = {10.1145/2976749.2978362},
booktitle = {Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
pages = {283–295},
numpages = {13},
keywords = {criminal smart contracts, ethereum},
location = {Vienna, Austria},
series = {CCS '16}
}

@InProceedings{10.1007/978-3-662-54455-6_8,
author="Atzei, Nicola
and Bartoletti, Massimo
and Cimoli, Tiziana",
editor="Maffei, Matteo
and Ryan, Mark",
title="A Survey of Attacks on Ethereum Smart Contracts (SoK)",
booktitle="Principles of Security and Trust",
year="2017",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="164--186",
abstract="Smart contracts are computer programs that can be correctly executed by a network of mutually distrusting nodes, without the need of an external trusted authority. Since smart contracts handle and transfer assets of considerable value, besides their correct execution it is also crucial that their implementation is secure against attacks which aim at stealing or tampering the assets. We study this problem in Ethereum, the most well-known and used framework for smart contracts so far. We analyse the security vulnerabilities of Ethereum smart contracts, providing a taxonomy of common programming pitfalls which may lead to vulnerabilities. We show a series of attacks which exploit these vulnerabilities, allowing an adversary to steal money or cause other damage.",
isbn="978-3-662-54455-6"
}
@online{eip1884,
author ={Martin Holst Swende},
year = {2019},
title = "EIP-1884: Repricing for trie-size-dependent opcodes",
url = {https://eips.ethereum.org/EIPS/eip-1884} 
}

@online{cream,
author={REKT news},
year ={2021},
title = "Cream Finance - Rekt",
url = {https://rekt.news/cream-rekt/}
}

@online{lendf,
author={Valid Network},
year={2020},
title="The Reentrancy Strikes Again - The case of lendf.me",
url={https://valid.network/post/the-reentrancy-strikes-again-the-case-of-lendf-me}}

@online{nick,
author={Nick Szabo},
year={1994},
title = "Smart Contracts",
url={https://www.fon.hum.uva.nl/rob/Courses/InformationInSpeech/CDROM/Literature/LOTwinterschool2006/szabo.best.vwh.net/smart.contracts.html}}

@inproceedings{security,
author = {Mense, Alexander and Flatscher, Markus},
title = {Security Vulnerabilities in Ethereum Smart Contracts},
year = {2018},
isbn = {9781450364799},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3282373.3282419},
doi = {10.1145/3282373.3282419},
abstract = {Smart contracts (SC) are one of the most appealing features of blockchain technologies facilitating, executing, and enforcing predefined terms of coded contracts without intermediaries. The steady adoption of smart contracts on the Ethereum blockchain has led to tens of thousands of contracts holding millions of dollars in digital currencies and small mistakes during the development of SC on immutable blockchains have already caused substantial losses and involve the danger for future incidents. Hence, today the secure development of smart contracts is an important topic and several attacks and incidents related to vulnerable smart contracts could have been avoided. To foster a secure development process of SC this paper summarizes known vulnerabilities in smart contracts found by literature research and analysis. It compares currently available code analysis tools for their capabilities to identify and detect vulnerabilities in smart contracts based on a taxonomy for vulnerabilities. Finally, based on the TheDOA attack the paper shows an example for the adoption of best practices to avoid severe vulnerabilities in smart contracts.},
booktitle = {Proceedings of the 20th International Conference on Information Integration and Web-Based Applications &amp; Services},
pages = {375–380},
numpages = {6},
keywords = {Security, Blockchain, Smart Contracts},
location = {Yogyakarta, Indonesia},
series = {iiWAS2018}
}

@inproceedings{reguard,
author = {Liu, Chao and Liu, Han and Cao, Zhao and Chen, Zhong and Chen, Bangdao and Roscoe, Bill},
title = {ReGuard: Finding Reentrancy Bugs in Smart Contracts},
year = {2018},
isbn = {9781450356633},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3183440.3183495},
doi = {10.1145/3183440.3183495},
abstract = {Smart contracts enabled a new way to perform cryptocurrency transactions over blockchains. While this emerging technique introduces free-of-conflicts and transparency, smart contract itself is vulnerable. As a special form of computer program, smart contract can hardly get rid of bugs. Even worse, an exploitable security bug can lead to catastrophic consequences, e.g., loss of cryptocurrency/money. In this demo paper, we focus on the most common type of security bugs in smart contracts, i.e., reentrancy bug, which caused the famous DAO attack with a loss of 60 million US dollars. We presented ReGuard, an fuzzing-based analyzer to automatically detect reentrancy bugs in Ethereum smart contracts. Specifically, ReGuard performs fuzz testing on smart contracts by iteratively generating random but diverse transactions. Based on the runtime traces, ReGuard further dynamically identifies reentrancy vulnerabilities. In the preliminary evaluation, we have analyzed 5 existing Ethereum contracts. ReGuard automatically flagged 7 previously unreported reentrancy bugs. A demo video of ReGuard is at https://youtu.be/XxJ3_-cmUiY.},
booktitle = {Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings},
pages = {65–68},
numpages = {4},
keywords = {smart contract, reentrancy bug, dynamic analysis},
location = {Gothenburg, Sweden},
series = {ICSE '18}
}

@inproceedings{smartcheck,
author = {Tikhomirov, Sergei and Voskresenskaya, Ekaterina and Ivanitskiy, Ivan and Takhaviev, Ramil and Marchenko, Evgeny and Alexandrov, Yaroslav},
title = {SmartCheck: Static Analysis of Ethereum Smart Contracts},
year = {2018},
isbn = {9781450357265},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3194113.3194115},
doi = {10.1145/3194113.3194115},
abstract = {Ethereum is a major blockchain-based platform for smart contracts - Turing complete programs that are executed in a decentralized network and usually manipulate digital units of value. Solidity is the most mature high-level smart contract language. Ethereum is a hostile execution environment, where anonymous attackers exploit bugs for immediate financial gain. Developers have a very limited ability to patch deployed contracts. Hackers steal up to tens of millions of dollars from flawed contracts, a well-known example being "The DAO", broken in June 2016. Advice on secure Ethereum programming practices is spread out across blogs, papers, and tutorials. Many sources are outdated due to a rapid pace of development in this field. Automated vulnerability detection tools, which help detect potentially problematic language constructs, are still underdeveloped in this area.We provide a comprehensive classification of code issues in Solidity and implement SmartCheck - an extensible static analysis tool that detects them1. SmartCheck translates Solidity source code into an XML-based intermediate representation and checks it against XPath patterns. We evaluated our tool on a big dataset of real-world contracts and compared the results with manual audit on three contracts. Our tool reflects the current state of knowledge on Solidity vulnerabilities and shows significant improvements over alternatives. SmartCheck has its limitations, as detection of some bugs requires more sophisticated techniques such as taint analysis or even manual audit. We believe though that a static analyzer should be an essential part of contract developers' toolbox, letting them fix simple bugs fast and allocate more effort to complex issues.},
booktitle = {Proceedings of the 1st International Workshop on Emerging Trends in Software Engineering for Blockchain},
pages = {9–16},
numpages = {8},
keywords = {static analysis, ethereum, smart contracts, bug detection, solidity},
location = {Gothenburg, Sweden},
series = {WETSEB '18}
}
@conference{icissp20,
author={Phitchayaphong Tantikul. and Sudsanguan Ngamsuriyaroj.},
title={Exploring Vulnerabilities in Solidity Smart Contract},
booktitle={Proceedings of the 6th International Conference on Information Systems Security and Privacy - ICISSP,},
year={2020},
pages={317-324},
publisher={SciTePress},
organization={INSTICC},
doi={10.5220/0008909803170324},
isbn={978-989-758-399-5},
issn={2184-4356},
}
@inproceedings{survey,
author = {Samreen, Noama Fatima and Alalfi, Manar H.},
title = {A Survey of Security Vulnerabilities in Ethereum Smart Contracts},
year = {2020},
publisher = {IBM Corp.},
address = {USA},
abstract = {Ethereum Smart Contracts based on Blockchain Technology (BT) enables monetary transactions among peers on a blockchain network independent of a central authorizing agency. Ethereum Smart Contracts are programs that are deployed as decentralized applications, having the building blocks of the blockchain consensus protocol. This enables consumers to make agreements in a transparent and conflict-free environment. However, there exists some security vulnerabilities within these smart contracts that are a potential threat to the applications and their consumers and have shown in the past to cause huge financial losses. In this study, we review the existing literature and broadly classify the BT applications. As Ethereum smart contracts find their application mostly in e-commerce applications, we believe these are more commonly vulnerable to attacks. In these smart contracts, we mainly focus on identifying vulnerabilities that programmers and users of smart contracts must avoid. This paper aims at explaining eight vulnerabilities that are specific to the application level of BT by analyzing the past exploitation case scenarios of these security vulnerabilities. We also review some of the available tools and applications that detect these vulnerabilities in terms of their approach and effectiveness. We also investigated the availability of detection tools for identifying these security vulnerabilities and lack thereof to identify some of them.},
booktitle = {Proceedings of the 30th Annual International Conference on Computer Science and Software Engineering},
pages = {73–82},
numpages = {10},
keywords = {smart contracts, ethereum, blockchain},
location = {Toronto, Ontario, Canada},
series = {CASCON '20}
}

@online{docs,
author = {ethereum.org},
title={Ethereum Development Documentation},
year={2021},
url={https://ethereum.org/en/developers/docs/}}

@online{solidity,
author ={Ethereum},
title={Solidity documentation},
year={2021},
url={https://docs.soliditylang.org/en/v0.8.11/#}
}

@book{mastering,
  title={Mastering Ethereum: Building Smart Contracts and DApps},
  author={Antonopoulos, A.M. and Wood, G. and Wood, G.},
  isbn={9781491971949},
  lccn={2018277266},
  url={https://books.google.be/books?id=SedSMQAACAAJ},
  year={2018},
  publisher={O'Reilly Media, Incorporated}
}

@online{constitution,
author ={Constitution DAO},
title={Constitution DAO},
year={2021},
url={https://www.constitutiondao.com/}}

@online{cryptocities,
author={Vitalik Buterin},
title={Crypto Cities},
year={2021},
url={https://vitalik.ca/general/2021/10/31/cities.html}}

@online{citydao,
author={City DAO},
title={The DAO for decentralized asset ownership},
year={2021},
url={https://www.citydao.io/#Section-1}}

@online{klimadao,
author={Klima DAO},
title={Introducing KlimaDAO},
year={2021},
url={https://docs.klimadao.finance/}}

@online{guardcheck,
author={fravoll},
title = {Guard Check},
year = {2018},
url={https://fravoll.github.io/solidity-patterns/guard_check.html}}

@online{cei,
author={fravoll},
title = {Checks Effects Interactions pattern},
year = {2018},
url={https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html}}


@INPROCEEDINGS{rocha,  author={Bragagnolo, Santiago and Rocha, Henrique and Denker, Marcus and Ducasse, Stephane},  booktitle={2018 International Workshop on Blockchain Oriented Software Engineering (IWBOSE)},   title={SmartInspect: solidity smart contract inspector},   year={2018},  volume={},  number={},  pages={9-18},  doi={10.1109/IWBOSE.2018.8327566}}

@ARTICLE{contractward,  author={Wang, Wei and Song, Jingjing and Xu, Guangquan and Li, Yidong and Wang, Hao and Su, Chunhua},  journal={IEEE Transactions on Network Science and Engineering},   title={ContractWard: Automated Vulnerability Detection Models for Ethereum Smart Contracts},   year={2021},  volume={8},  number={2},  pages={1133-1144},  doi={10.1109/TNSE.2020.2968505}}

@ARTICLE{automated,  author={Qian, Peng and Liu, Zhenguang and He, Qinming and Zimmermann, Roger and Wang, Xun},  journal={IEEE Access},   title={Towards Automated Reentrancy Detection for Smart Contracts Based on Sequential Models},   year={2020},  volume={8},  number={},  pages={19685-19695},  doi={10.1109/ACCESS.2020.2969429}}

@INPROCEEDINGS{slither,  author={Feist, Josselin and Grieco, Gustavo and Groce, Alex},  booktitle={2019 IEEE/ACM 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain (WETSEB)},   title={Slither: A Static Analysis Framework for Smart Contracts},   year={2019},  volume={},  number={},  pages={8-15},  doi={10.1109/WETSEB.2019.00008}}

@online{etherscan_api,
author ={Etherscan},
year = {2021},
title ={Etherscan API Knowledge Base},
url = {https://docs.etherscan.io/api-endpoints/contracts}
}